// 2-SAT
// Time Complexity O(m+n)
// m -> Vertex n -> Edge
#include <cstring>
#include <cstdio>
#include <vector>
#include <cmath>
#include <iostream>
using namespace std;
#define memo(a,b) memset(a,b,sizeof(a))
#define pb push_back
#define mx 40000
int n , m , cycle=0,ct[mx+10];
vector <int> graph[mx+10] ,graphGT[mx+10],Q;
bool visit[mx+10];
void addEdge(int u,int v)
{
    graph[u].pb(v);
    graphGT[v].pb(u);
}
void dfs1(int u)
{
    visit[u]=true;
    for(int i=0;i<graph[u].size();i++)
    {
        int v = graph[u][i];
        if(!visit[v])dfs1(v);
    }
    Q.pb(u);
}
void dfs2(int u)
{
    visit[u]=false;ct[u]=cycle;
    for(int i=0;i<graphGT[u].size();i++)
    {
        int v = graphGT[u][i];
        if(visit[v]) dfs2(v);
    }
}
void scc()
{
    memo(visit,false);
    for(int i=1;i<=2*m;i++) if(!visit[i]) dfs1(i);
    cycle = 0 ;
    for(int i=Q.size()-1;i>=0;i--)
    {
        int u = Q[i] ;
        if(visit[u]) cycle++ , dfs2(u) ;
    }
}
void sat_2()
{
    scc();
    for(int i=1;i<=m;i++)
    {
        if(ct[i]==ct[i+m]) { puts("No"); return ; }
    }
    puts("Yes");
    vector <int> ans ;
    for(int i=1;i<=m;i++)
    {
        if(ct[i]>ct[i+m]) ans.pb(i);
    }
    cout << ans.size() ;
    for(int i=0;i<ans.size();i++) cout << " " << ans[i] ;
    puts("");
}
int main()
{
    scanf("%d%d",&n,&m);
    while(n--)
    {
        int u , v ;
        scanf("%d%d",&u,&v);
        if(u<0&&v<0)
        {
            addEdge(abs(u),abs(v)+m);
            addEdge(abs(v),abs(u)+m);
        }
        else if(u<0&&v>0)
        {
            addEdge(abs(u),v);
            addEdge(v+m,abs(u)+m);
        }
        else if(u>0&&v<0)
        {
            addEdge(u+m,abs(v)+m);
            addEdge(abs(v),u);
        }
        else
        {
            addEdge(u+m,v);
            addEdge(v+m,u);
        }
    }
    sat_2();
    return 0;
}
/*
4 3
+1 +3
+2 -1
+2 -3
-1 -2
*/
/*
Yes
2 2 3
*/
