// Read Coreman's Introduction to algorithms (3rd edition) Page 609 to know
// Tree Edge Forward Edge , Back Edge , Cross Edge
// Time Complexity O(V+E)
// V -> virtex E -> edge
#include <cstdio>
#include <vector>
using namespace std;
#define mx 10000
vector <int> graph[mx];
int parent[mx],dt[mx],ft[mx],colour[mx],counter=0;
bool visit[mx];
void dfs(int u)
{
    if(visit[u]) return;
    visit[u]=true;
    ft[u]=++counter;
    colour[u]=1;
    for(int i=0;i<graph[u].size();i++)
    {
        int v = graph[u][i];
        dfs(v);
        if(ft[u]<ft[v]) printf("There is a forward edge between %d and %d\n",u,v); // Forward edge
        else if (colour[v]==2) printf("There is a cross edge between %d and %d\n",u,v); // Cross Edge
        else if (colour[v]==1) printf("There is a back between %d and %d\n",u,v);  //  Back Edge
    }
    dt[u]=++counter;
    colour[u]=2;
}
int main()
{
    int N,M;
    scanf("%d%d",&N,&M); // N is the number of nodes and M is the number of connections
    while(M--)
    {
        int u , v ; // There is a connection from node u to v
        scanf("%d%d",&u,&v);
        graph[u].push_back(v);
    }
    for(int i=1;i<=N;i++) dfs(i);
    return 0;
}
/*
6 8
1 2
2 3
3 4
1 4
4 2
5 3
5 6
6 6
*/
/*
There is a back between 4 and 2
There is a forward edge between 3 and 4
There is a forward edge between 2 and 3
There is a forward edge between 1 and 2
There is a forward edge between 1 and 4
There is a cross edge between 5 and 3
There is a back between 6 and 6
There is a forward edge between 5 and 6
*/
