#include <stdio.h>
#include <queue>
using namespace std;
vector <int>  graph[10000+10];
vector <int> cost[10000+10];
struct node
{
    int u,v,w;
};
class cmp
{
public:
    bool operator()(node &a,node &b)
    {
        if(a.w>b.w) return true;else return false; //sorted in ascending order
    }
};
int MST(int N)
{
    bool visit[10000+10];
    for(int i=1;i<=N;i++) visit[i]=false;
    priority_queue <node,vector<node>,cmp> Q;
    visit[1]=true;
    for(int i=0;i<graph[1].size();i++)
    {
        node x;
        x.u=1;x.v=graph[1][i];x.w=cost[1][i];
        Q.push(x);
    }
    int ans=0,cnt=0;
    while(Q.size()!=0)
    {
        node X=Q.top();
        Q.pop();
        int u=X.u,v=X.v,w=X.w;
        if(visit[v]==false)
        {
            ans=ans+w;
            visit[v]=true;
            for(int i=0;i<graph[v].size();i++)
            {
                node x;
                x.u=v;x.v=graph[v][i];x.w=cost[v][i];
                Q.push(x);
            }
            cnt++;
        }
        if(cnt==N-1)break;
    }
    if(cnt!=N-1) return -1;
    return ans;
}
int main()
{
    int N,M; // N is the number of nodes and M is the number of relations
    scanf("%d%d",&N,&M);
    while(M--)
    {
        int u,v,w;
        scanf("%d%d%d",&u,&v,&w);
        graph[u].push_back(v);
        graph[v].push_back(u);
        cost[u].push_back(w);
        cost[v].push_back(w);
    }
    printf("%d\n",MST(N));
    return 0;
}
